"~/.config/vim/vimrc
set nocompatible

" XDG Environment For VIM
" =======================
"
" References
" ----------
"
" - http://standards.freedesktop.org/basedir-spec/basedir-spec-latest.html#variables
" - http://tlvince.com/vim-respect-xdg
"
" Instructions
" ------------
"
" The following two (2) directories must exist if you want VIM to actually
" use them, e.g. `mkdir $XDG_CACHE_HOME/vim $XDG_CONFIG_HOME/vim` or
" `mkdir $HOME/.cache/vim $HOME/.config`.
"
" - $XDG_CACHE_HOME/vim
" - $XDG_CONFIG_HOME/vim

if empty($XDG_CACHE_HOME)
    let $XDG_CACHE_HOME="$HOME/.cache"
endif
if empty($XDG_CONFIG_HOME)
    let $XDG_CONFIG_HOME="$HOME/.config"
endif
set directory=$XDG_CACHE_HOME/vim/swap,~/,/tmp
set backupdir=$XDG_CACHE_HOME/vim/backup,~/,/tmp
set undodir=$XDG_CACHE_HOME/vim/undo,~/,/tmp
set viminfo+=n$XDG_CACHE_HOME/vim/viminfo
set runtimepath=$XDG_CONFIG_HOME/vim,$XDG_CONFIG_HOME/vim/after,$VIM,$VIMRUNTIME
let $MYVIMRC="$XDG_CONFIG_HOME/vim/vimrc"

filetype off " required for vundle

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim/
call vundle#begin()

" let vundle manage vundle
" required
Plugin 'gmarik/Vundle.vim'
Plugin 'jnurmine/Zenburn'
Plugin 'altercation/vim-colors-solarized'
Plugin 'scrooloose/nerdtree'
Plugin 'jistr/vim-nerdtree-tabs'
"Plugin 'Lokaltog/powerline'

" All vundle plugins must be added before the following line
call vundle#end()" Brief help
filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
"filetype plugin on
"
" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
"
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line

" general
set spelllang=en_us
set history=10000
set backspace=indent,eol,start
set number
set autoread
set whichwrap+=<,>,[,],h,l
set display=lastline
set virtualedit=block
set scrolloff=3
set laststatus=2
set foldmethod=marker
" no bells!
set noerrorbells visualbell t_vb=
" text wrapping
set wrap linebreak
" disable welcome screen and use short messages
set shortmess=atToOI
" % matches on if/else, tags, etc.
runtime macros/matchit.vim

" command-line completion
set wildmenu wildmode=list:longest,full

" omit numbers in html output
let g:html_number_lines = 0

" statusline -- see the powerline bit at the end
"set showmode showcmd ruler

" default indent style
set expandtab softtabstop=2 shiftwidth=2
set cinoptions=(0

autocmd FileType conque_term setlocal nocursorline

autocmd FileType rst,markdown setl textwidth=79

" searching
set hlsearch
set incsearch
set ignorecase
set smartcase
set wrapscan

" Be able to see whitespace
set listchars=trail:·,precedes:«,extends:»,eol:↲,tab:▸\

let mapleader = ","

" F4 toggles paste mode
set pastetoggle=<F4>

" F6 toggles spell checking
nn <F6> :setlocal spell! spell?<CR>

"if has('mouse')
"    set mouse=a
"endif

if has ('gui_running')
  " autoselect, console dialogs, don't source menu.vim
  set guioptions=acM
  set mousefocus
  set guifont=Monospace\ 9
  autocmd GUIEnter * set t_vb=
  map <S-Insert> <MiddleMouse>
  map! <S-Insert> <MiddleMouse>
endif

" colors
set background=dark

if has ('gui_running') || &t_Co > 255
  colorscheme solarized
  let g:solarized_termcolors = 256
  set cursorline
  let g:Powerline_symbols = 'fancy'
  let g:Powerline_colorscheme = 'solarized'
endif

if has ('gui_running') == 0 && &t_Co > 255
  let g:solarized_termtrans = 1
endif

if has ('gui_running') || &t_Co > 2
  syntax on
  " highlight trailing whitespace, except when typing at eol
  highlight ExtraWhitespace ctermbg=darkred guibg=darkred
  match ExtraWhitespace /\s\+$/
  autocmd BufWinEnter * match ExtraWhitespace /\s\+$/
  autocmd InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
  autocmd InsertLeave * match ExtraWhitespace /\s\+$/
  autocmd BufWinLeave * call clearmatches()
endif

let g:no_rust_conceal = 1

" detect filetype and use appropriate indenting and plugins
filetype indent plugin on

let g:ycm_min_num_of_chars_for_completion = 1
let g:ycm_autoclose_preview_window_after_completion = 1

" NERDTreeTabs
map <Leader>n <plug>NERDTreeTabsToggle<CR>
if has ('gui_running')
  let g:nerdtree_tabs_open_on_gui_startup = 1
else
  let g:nerdtree_tabs_open_on_console_startup = 1
endif

" powerline - gonna try this with an AUR package, since this
"             plugin is so gnarly and complex
"set rtp+=~/.vim/bundle/powerline/powerline/bindings/vim
"set noshowmode " Hide the default mode text (e.g. -- INSERT -- below the statusline)
"let g:Powerline_symbols = "fancy"
"if ! has('gui_running')
"  set ttimeoutlen=10
"  augroup FastEscape
"    autocmd!
"    au InsertEnter * set timeoutlen=0
"    au InsertLeave * set timeoutlen=1000
"  augroup END
"endif
